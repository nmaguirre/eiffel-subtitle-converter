note
	description: "Main window for this application"
	author: "Generated by the New Vision2 Application Wizard."
	date: "$Date: 2015/9/8 18:38:1 $"
	revision: "1.0.0"

class
	MAIN_WINDOW

inherit
	EV_TITLED_WINDOW
		redefine
			create_interface_objects,
			initialize,
			is_in_default_state
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end

	ABSTRACT_OBSERVER
		undefine
			default_create, copy
		redefine
			on_update
		end

create
	default_create

feature -- Initialisation

	set_logic(new_logic: CONVERTER_LOGIC)
		do
			system_logic := new_logic
		end

	set_controller(new_controller: CONTROLLER)
		do
			controller := new_controller
		end

feature {NONE} -- Initialization

	create_interface_objects
			-- <Precursor>
		do
				-- Create main container.
			create main_container
				-- Create the menu bar.
			create standard_menu_bar
				-- Create file menu.
			create file_menu.make_with_text (Menu_file_item)
				-- Create help menu.
			create help_menu.make_with_text (Menu_help_item)
				-- Create a toolbar.
			create standard_toolbar
				-- Create a status bar and a status label.
			create standard_status_bar
			create standard_status_label.make_with_text ("Add your status text here...")


		end

	initialize
			-- Build the interface for this window.
		do
			Precursor {EV_TITLED_WINDOW}

				-- Create and add the menu bar.
			build_standard_menu_bar
			set_menu_bar (standard_menu_bar)

				-- Create and add the toolbar.
			build_standard_toolbar
			upper_bar.extend (create {EV_HORIZONTAL_SEPARATOR})
			upper_bar.extend (standard_toolbar)

				-- Create and add the status bar.
			build_standard_status_bar
			lower_bar.extend (standard_status_bar)

			build_main_container
			extend (main_container)


				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window.
			set_title (Window_title)

				-- Set the initial size of the window.
			set_size (Window_width, Window_height)
			create icon
			icon.set_with_named_file ("./gui/icon.png")
			Current.set_icon_pixmap (icon)
		end

	is_in_default_state: BOOLEAN
			-- Is the window in its default state?
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then
				(height = Window_height) and then
				(title.is_equal (Window_title))
		end


feature {NONE} -- Menu Implementation

	standard_menu_bar: EV_MENU_BAR
			-- Standard menu bar for this window.

	file_menu: EV_MENU
			-- "File" menu for this window (contains New, Open, Close, Exit...)

	help_menu: EV_MENU
			-- "Help" menu for this window (contains About...)

	build_standard_menu_bar
			-- Create and populate `standard_menu_bar'.
		do
				-- Add the "File" menu.
			build_file_menu
			standard_menu_bar.extend (file_menu)
				-- Add the "Help" menu.
			build_help_menu
			standard_menu_bar.extend (help_menu)
		ensure
			menu_bar_initialized: not standard_menu_bar.is_empty
		end

	build_file_menu
			-- Create and populate `file_menu'.
		local
			menu_item: EV_MENU_ITEM
			a:EV_PIXMAP
		do
			create menu_item.make_with_text (Menu_file_new_item)
				--| TODO: Add the action associated with "New" here.
			file_menu.extend (menu_item)


			create menu_item.make_with_text (Menu_file_open_item)
				--| TODO: Add the action associated with "Open" here.
			menu_item.select_actions.extend (agent on_open)
			file_menu.extend (menu_item)


			create menu_item.make_with_text (Menu_file_save_item)
				--| TODO: Add the action associated with "Save" here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_saveas_item)
				--| TODO: Add the action associated with "Save As..." here.
			file_menu.extend (menu_item)

			create menu_item.make_with_text (Menu_file_close_item)
				--| TODO: Add the action associated with "Close" here.
			file_menu.extend (menu_item)

			file_menu.extend (create {EV_MENU_SEPARATOR})

				-- Create the File/Exit menu item and make it call
				-- `request_close_window' when it is selected.
			create menu_item.make_with_text (Menu_file_exit_item)
			menu_item.select_actions.extend (agent request_close_window)
			file_menu.extend (menu_item)
		ensure
			file_menu_initialized: not file_menu.is_empty
		end

	build_help_menu
			-- Create and populate `help_menu'.
		local
			menu_item: EV_MENU_ITEM

		do
			create menu_item.make_with_text (Menu_help_contents_item)
				--| TODO: Add the action associated with "Contents and Index" here.
			help_menu.extend (menu_item)


			create menu_item.make_with_text (Menu_help_about_item)
			menu_item.select_actions.extend (agent on_about)
			help_menu.extend (menu_item)

		ensure
			help_menu_initialized: not help_menu.is_empty
		end


feature {NONE} -- ToolBar Implementation

	standard_toolbar: EV_TOOL_BAR
			-- Standard toolbar for this window.

	build_standard_toolbar
			-- Populate the standard toolbar.
		local
			toolbar_item: EV_TOOL_BAR_BUTTON
			toolbar_pixmap: EV_PIXMAP
		do
				-- Initialize the toolbar.
			create toolbar_item
			create toolbar_pixmap
			toolbar_pixmap.set_with_named_file ("./gui/new.png")
			toolbar_item.set_pixmap (toolbar_pixmap)
			standard_toolbar.extend (toolbar_item)

			create toolbar_item
			create toolbar_pixmap
			toolbar_pixmap.set_with_named_file ("./gui/open.png")
			toolbar_item.set_pixmap (toolbar_pixmap)
			toolbar_item.select_actions.extend (agent on_open)
			standard_toolbar.extend (toolbar_item)

			create toolbar_item
			create toolbar_pixmap
			toolbar_pixmap.set_with_named_file ("./gui/save.png")
			toolbar_item.set_pixmap (toolbar_pixmap)
			standard_toolbar.extend (toolbar_item)

		ensure
			toolbar_initialized: not standard_toolbar.is_empty
		end

feature {NONE} -- StatusBar Implementation

	standard_status_bar: EV_STATUS_BAR
			-- Standard status bar for this window

	standard_status_label: EV_LABEL
			-- Label situated in the standard status bar.
			--
			-- Note: Call `standard_status_label.set_text (...)' to change the text
			--       displayed in the status bar.

	build_standard_status_bar
			-- Populate the standard toolbar.
		do
				-- Initialize the status bar.
			standard_status_bar.set_border_width (5)

				-- Populate the status bar.
			standard_status_label.align_text_left
			standard_status_bar.extend (standard_status_label)
		end

feature {NONE} -- About Dialog Implementation

	on_about
			-- Display the About dialog.
		local
			about_dialog: ABOUT_DIALOG
		do
			create about_dialog
			about_dialog.show_modal_to_window (Current)
		end

feature {NONE} -- Implementation, Close event

	request_close_window
			-- Process user request to close the window.
		local
			question_dialog: EV_CONFIRMATION_DIALOG
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)

			if question_dialog.selected_button ~ (create {EV_DIALOG_CONSTANTS}).ev_ok then
					-- Destroy the window.
				destroy

					-- End the application.
					--| TODO: Remove next instruction if you don't want the application
					--|       to end when the first window is closed..
				if attached (create {EV_ENVIRONMENT}).application as a then
					a.destroy
				end
			end
		end

feature {NONE} -- Implementation

	main_container: EV_VERTICAL_BOX
			-- Main container (contains all widgets displayed in this window).

	build_main_container
			-- Populate `main_container'.
		local
			microdvd_label: EV_LABEL
			subrip_label: EV_LABEL
			pixmap: EV_PIXMAP
			fixed_box: EV_FIXED
			font: EV_FONT
			text_field_fps : EV_TEXT_FIELD
			text_field_offset : EV_TEXT_FIELD
			button_forward : EV_BUTTON
			button_rewind : EV_BUTTON
			button_convert: EV_BUTTON
			button_fps: EV_BUTTON
			background: EV_PIXMAP

		do
			create microdvd_text
			create subrip_text
			microdvd_text.disable_edit
			microdvd_text.set_minimum_height (175)
			microdvd_text.set_background_color (create {EV_COLOR}.make_with_8_bit_rgb (243, 243, 243))
			subrip_text.disable_edit
			subrip_text.set_minimum_height (175)
			subrip_text.set_background_color (create {EV_COLOR}.make_with_8_bit_rgb (243, 243, 243))

			create a_color.make_with_8_bit_rgb (0, 150,200)
			create microdvd_label.make_with_text ("MicroDVD")
			create font.default_create
			font.set_family ({EV_FONT_CONSTANTS}.family_modern)
			font.set_weight ({EV_FONT_CONSTANTS}.weight_bold)
			font.set_height_in_points (12)
			microdvd_label.set_font (font)
			microdvd_label.set_foreground_color (create {EV_COLOR}.make_with_8_bit_rgb (0, 0, 0))
			microdvd_label.set_background_color (a_color)

			main_container.extend (microdvd_label)
			main_container.extend (microdvd_text)
			main_container.disable_item_expand (microdvd_label)


			create background
			background.set_with_named_file ("./gui/background.png")
			background.stretch (252, 42)
			create fixed_box
			fixed_box.set_minimum_height (42)
			fixed_box.set_background_pixmap (background)

				--NUMBER TEXT FIELD FOR OFFSET
			create text_field_offset
			text_field_offset.set_minimum_width (50)
			text_field_offset.align_text_right
			fixed_box.extend (text_field_offset)
			fixed_box.set_item_height (text_field_offset, 10)
			fixed_box.set_item_x_position(text_field_offset,110)
			fixed_box.set_item_y_position(text_field_offset,8)

				--BUTTON REWIND
			create button_rewind
			create pixmap
			pixmap.set_with_named_file ("./gui/rewind.png")
			pixmap.stretch (17, 17)
			button_rewind.set_pixmap (pixmap)
			button_rewind.set_foreground_color (create {EV_COLOR}.make_with_8_bit_rgb (0, 0, 0))
			button_rewind.set_minimum_width (40)
			button_rewind.set_tooltip (Button_rewind_tooltip)
			button_rewind.select_actions.extend (agent on_rewind (text_field_offset))
			fixed_box.extend (button_rewind)
			fixed_box.set_item_x_position(button_rewind,70)
			fixed_box.set_item_y_position(button_rewind,7)

				--BUTTON FORWARD
			create button_forward
			create pixmap
			pixmap.set_with_named_file ("./gui/forward.png")
			pixmap.stretch (17, 17)
			button_forward.set_pixmap (pixmap)
			button_forward.set_foreground_color (create {EV_COLOR}.make_with_8_bit_rgb (0, 0, 0))
			button_forward.set_minimum_width (40)
			button_forward.set_tooltip (Button_forward_tooltip)
			button_forward.select_actions.extend (agent on_forward (text_field_offset))
			fixed_box.extend (button_forward)
			fixed_box.set_item_x_position(button_forward,160)
			fixed_box.set_item_y_position(button_forward,7)

				-- NUMBER TEXT FIELD FOR CHANGE FPS
			create text_field_fps
			text_field_fps.set_minimum_width (50)
			text_field_fps.set_text ({MICRODVD_SUBTITLE}.min_valid_fps.out)
			text_field_fps.align_text_right
			fixed_box.extend (text_field_fps)
			fixed_box.set_item_height (text_field_fps, 10)
			fixed_box.set_item_x_position(text_field_fps,385)
			fixed_box.set_item_y_position(text_field_fps,8)

				-- BUTTON CHANGE FPS
			create button_fps.make_with_text(Button_change_fps_item)
			button_fps.set_foreground_color (create {EV_COLOR}.make_with_8_bit_rgb (0, 0, 0))
			button_fps.set_minimum_width (100)
			fixed_box.extend (button_fps)
			fixed_box.set_item_x_position(button_fps,435)
			fixed_box.set_item_y_position(button_fps,7)
			button_fps.select_actions.extend (agent on_changeFPS)


				-- BUTTON CONVERT
			create button_convert.make_with_text (Button_convert_item)
			create pixmap
			pixmap.set_with_named_file ("./gui/convert.png")
			pixmap.stretch (24, 18)
			button_convert.set_pixmap (pixmap)
			button_convert.set_font (create {EV_FONT}.make_with_values (5, 9, 10, 12))
			button_convert.set_foreground_color (create {EV_COLOR}.make_with_8_bit_rgb (21, 21, 255))
			button_convert.set_minimum_width (100)
			fixed_box.extend (button_convert)
			button_convert.select_actions.extend (agent on_convert)
			fixed_box.set_item_height (button_convert, 20)
			fixed_box.set_item_x_position(button_convert,650)
			fixed_box.set_item_y_position(button_convert,7)

			main_container.extend (fixed_box)
			main_container.disable_item_expand (fixed_box)


				--SUBRIP LABEL & TEXT BOX
			create subrip_label.make_with_text ("SubRip")
			subrip_label.set_font (font)
			subrip_label.set_foreground_color (create {EV_COLOR}.make_with_8_bit_rgb (0, 0, 0))
			subrip_label.set_background_color (a_color)
			main_container.extend (subrip_label)
			main_container.disable_item_expand (subrip_label)
			main_container.extend (subrip_text)
		ensure
			main_container_created: main_container /= Void
		end

feature --Implementation, Converter_sub

	on_open
		local
			open_dialog: EV_FILE_OPEN_DIALOG
			file_extension: STRING
		do
			create open_dialog
			open_dialog.filters.extend (["*.srt;*.sub","Subtitle Files (.sub,.srt)"])
			open_dialog.show_modal_to_window (Current)

			if not(open_dialog.file_name.is_empty) then
				create file_name.make_from_string (open_dialog.file_name)
				create file_extension.make_from_string (file_name.substring (file_name.count-3, file_name.count))
				if (file_extension.is_equal (".srt"))
				then
					controller.load_subrip_subtitle (file_name)
					on_update
				end
				if (file_extension.is_equal (".sub"))
				then
					controller.load_microdvd_subtile (file_name)
				end

			end
		end

	on_convert
		local
			msj_error: EV_INFORMATION_DIALOG
		do
			if microdvd_text.text_length = 0 and subrip_text.text_length = 0 then
				create msj_error.make_with_text ("There is no subtitle to convert ")
				msj_error.set_title ("Error")
				msj_error.set_pixmap (default_pixmaps.error_pixmap)
				msj_error.show_modal_to_window (Current)
			else
				controller.convert_subtitle
			end
		end

	on_forward (text_field: EV_TEXT_FIELD)
		local
			milliseconds: INTEGER
		do
			milliseconds := text_field.text.to_integer
			controller.forward (milliseconds)
		end

	on_rewind (text_field: EV_TEXT_FIELD)
		local
			milliseconds: INTEGER
		do
			milliseconds := text_field.text.to_integer
			controller.rewind(milliseconds)
		end

	on_changeFPS
		local
			msj_error: EV_INFORMATION_DIALOG

		do
			if microdvd_text.text_length = 0 and subrip_text.text_length = 0 then
				create msj_error.make_with_text ("There is no subtitle to change FPS ")
				msj_error.set_title ("Error")
				msj_error.set_pixmap (default_pixmaps.error_pixmap)
				msj_error.show_modal_to_window (Current)
			else
				if microdvd_text.text_length /= 0 then
					system_logic.source_as_microdvd.change_fps (25)
					system_logic.convert_subtitle
					on_update
				end

			end
		end

feature -- Observer features

	on_update
		do
			if system_logic.has_loaded_microdvd_subtitle then
				microdvd_text.remove_text
				microdvd_text.append_text (system_logic.source_as_microdvd.out)
				subrip_text.remove_text
				if attached {SUBRIP_SUBTITLE} system_logic.target as subrip_sub then
					subrip_text.remove_text
					subrip_text.append_text (subrip_sub.out)
				end
			end
			if system_logic.has_loaded_subrip_subtitle then
				subrip_text.set_text (system_logic.source_as_subrip.out)
				microdvd_text.remove_text
				if attached {MICRODVD_SUBTITLE} system_logic.target as microdvd_sub then
					microdvd_text.set_text (microdvd_sub.out)
				end
			end
		end



feature {NONE} -- Implementation / Constants

	Window_title: STRING = "eiffel_subtitle_converter"
			-- Title of the window.

	Window_width: INTEGER = 800
			-- Initial width for this window.

	--Window_height: INTEGER = 800
Window_height: INTEGER = 600
			-- Initial height for this window.

	microdvd_text: EV_TEXT

	subrip_text: EV_TEXT

	a_color: EV_COLOR

	system_logic: CONVERTER_LOGIC

	controller: CONTROLLER

	file_name : STRING

	icon: EV_PIXMAP

end
