note
	description: "Main window for this application"
	author: "Generated by the New Vision2 Application Wizard."
	date: "$Date: 2015/10/5 21:3:11 $"
	revision: "1.0.0"

class
	MAIN_WINDOW

inherit
	EV_TITLED_WINDOW
		redefine
			create_interface_objects,
			initialize,
			is_in_default_state
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end


	ABSTRACT_OBSERVER
		undefine
			default_create, copy
		redefine
			on_update
		end

create
	default_create

feature -- Initialization

	set_controller(new_controller: CONTROLLER)
		do
			controller := new_controller
		end

feature {NONE} -- Initialization

	create_interface_objects
			-- <Precursor>
		do
				-- Create main container.
			create main_container

			create controller.make_with_no_subtitle
			create button.make_with_text("...")
			create button_2.make_with_text("...")
			create button_3.make_with_text("Ready")

			create text.default_create
			create text_2.default_create

			create label.make_with_text ("Input File :")
			create label_2.make_with_text ("Format :")
			create label_4.make_with_text ("Output File :")
			create label_5.make_with_text ("Convert : MicroDVD to SubRIP")
			create label_3.make_with_text("Adjust Time :")
			create label_6.make_with_text("Milliseconds")

			create text_field.default_create
			create text_field_2.default_create

			create radio_button_subrip.make_with_text ("SubRIP Format")
			create radio_button_microdvd.make_with_text ("MicroDVD Format")

			create color.make_with_rgb (0.710,0,0)
			create color2.make_with_rgb (0,0.710,0)

			create notebook

			create interval.make (-300000,300000)
			create spin_button.make_with_value_range (interval)

			create string_array.make_filled ("12", 1, 10)
			string_array.enter ("15",2)
			string_array.enter ("23.97",3)
			string_array.enter ("24",4)
			string_array.enter ("25",5)
			string_array.enter ("29.97",6)
			string_array.enter ("30",7)
			string_array.enter ("50",8)
			string_array.enter ("59.94",9)
			string_array.enter ("60",10)

			create combo_box.make_with_strings (string_array)

			create file_name.make_empty

		end

	initialize
			-- Build the interface for this window.
		do
			Precursor {EV_TITLED_WINDOW}

			build_main_container
			extend (main_container)

				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window.
			set_title (Window_title)

			disable_user_resize

				-- Set the initial size of the window.
			set_size (Window_width, Window_height)

			main_container.extend (label)
			main_container.set_item_x_position (label, 10)
			main_container.set_item_y_position (label, 23)

			text_field.set_minimum_height (24)
			text_field.set_minimum_width (453)
			main_container.extend (text_field)
			main_container.set_item_x_position (text_field, 80)
			main_container.set_item_y_position (text_field, 20)

			button.select_actions.extend (agent File_open_dialog.show_modal_to_window (first_window))
			button.set_minimum_height (22)
			button.set_minimum_width (35)
			main_container.extend (button)
			main_container.set_item_x_position (button, 533)
			main_container.set_item_y_position (button, 20)

			main_container.extend (label_2)
			main_container.set_item_x_position (label_2, 50)
			main_container.set_item_y_position (label_2, 60)

			radio_button_microdvd.select_actions.extend (agent event)
			main_container.extend (radio_button_microdvd)
			main_container.set_item_x_position (radio_button_microdvd, 100)
			main_container.set_item_y_position (radio_button_microdvd, 58)

			radio_button_subrip.select_actions.extend (agent event_2)
			main_container.extend (radio_button_subrip)
			main_container.set_item_x_position (radio_button_subrip, 225)
			main_container.set_item_y_position (radio_button_subrip, 58)

			text.disable_edit
			text_2.disable_edit

			notebook.set_minimum_size (557, 300)
			notebook.selection_actions.extend (agent actions_tab)
			main_container.extend (notebook)
			main_container.set_item_x_position (notebook, 10)
			main_container.set_item_y_position (notebook, 120)
			notebook.extend (text)
			notebook.set_item_text (text, "Input")

			notebook.extend (text_2)
			notebook.set_item_text (text_2, "Output")

			main_container.extend (label_4)
			main_container.set_item_x_position (label_4, 10)
			main_container.set_item_y_position (label_4, 433)

			text_field_2.set_minimum_height (24)
			text_field_2.set_minimum_width (453)
			main_container.extend (text_field_2)
			main_container.set_item_x_position (text_field_2, 80)
			main_container.set_item_y_position (text_field_2, 430)

			button_2.select_actions.extend (agent File_save_dialog.show_modal_to_window (first_window))
			button_2.set_minimum_height (22)
			button_2.set_minimum_width (35)
			main_container.extend (button_2)
			main_container.set_item_x_position (button_2, 533)
			main_container.set_item_y_position (button_2, 430)

			main_container.extend (label_5)
			main_container.set_item_x_position (label_5, 300)
			main_container.set_item_y_position (label_5, 475)

			button_3.set_background_color(color)
			button_3.set_minimum_height (22)
			button_3.set_minimum_width (80)
			main_container.extend (button_3)
			main_container.set_item_x_position (button_3, 488)
			main_container.set_item_y_position (button_3, 470)
			button_3.select_actions.extend (agent ready)
			button_3.disable_sensitive

			main_container.extend (label_3)
			main_container.set_item_x_position (label_3, 24)
			main_container.set_item_y_position (label_3, 90)

			spin_button.set_step (100)
			spin_button.disable_edit
			spin_button.set_minimum_width (80)

			combo_box.set_minimum_width (60)
			combo_box.disable_edit


		end



	is_in_default_state: BOOLEAN
			-- Is the window in its default state?
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then
				(height = Window_height) and then
				(title.is_equal (Window_title))
		end


feature {NONE} -- Implementation, Close event

	request_close_window
			-- Process user request to close the window.
		local
			question_dialog: EV_CONFIRMATION_DIALOG
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)

			if question_dialog.selected_button ~ (create {EV_DIALOG_CONSTANTS}).ev_ok then
					-- Destroy the window.
				destroy

					-- End the application.
					--| TODO: Remove next instruction if you don't want the application
					--|       to end when the first window is closed..
				if attached (create {EV_ENVIRONMENT}).application as a then
					a.destroy
				end
			end
		end

feature {NONE} -- Implementation

	file_name: STRING

	color, color2:EV_COLOR

	radio_button_subRIP: EV_RADIO_BUTTON
	radio_button_microDVD: EV_RADIO_BUTTON

	text_field,text_field_2: EV_TEXT_FIELD

	label,label_2,label_3,label_4,label_5,label_6: EV_LABEL

	button,button_2,button_3:EV_BUTTON

	notebook: EV_NOTEBOOK

	text,text_2: EV_TEXT

	spin_button: EV_SPIN_BUTTON

	interval:INTEGER_INTERVAL

	combo_box: EV_COMBO_BOX

	string_array: ARRAY[STRING]

	main_container: EV_FIXED
			-- Main container (contains all widgets displayed in this window).

	actions_tab
	do
		if(notebook.selected_item_index = 1 )then
			enable_disable_button()
		else
			enable_disable_button()
		end
	end

	build_main_container
			-- Populate `main_container'.
		do
			main_container.extend (create {EV_FIXED})
		ensure
			main_container_created: main_container /= Void
		end

	event
		do
			if(not main_container.has (spin_button))then
				label_5.set_text ("Convert : MicroDVD to SubRIP")
				if(main_container.has (combo_box))then
					main_container.prune (combo_box)
					main_container.prune (label_6)
				end
				spin_button.set_value (0)
				main_container.extend (spin_button)
				main_container.set_item_x_position (spin_button, 100)
				main_container.set_item_y_position (spin_button, 86)
				label_6.destroy
				create label_6.make_with_text ("Milliseconds")
				main_container.extend (label_6)
				main_container.set_item_x_position (label_6, 185)
				main_container.set_item_y_position (label_6, 90)
			end

		end

	event_2
		do
			if(not main_container.has (combo_box))then
				label_5.set_text ("Convert : SubRIP to MicroDVD")
				if(main_container.has (spin_button))then
					main_container.prune (spin_button)
					main_container.prune (label_6)
				end
				combo_box.set_text ("23.97")
				main_container.extend (combo_box)
				main_container.set_item_x_position (combo_box, 100)
				main_container.set_item_y_position (combo_box, 86)
				label_6.destroy
				create label_6.make_with_text ("FPS")
				main_container.extend (label_6)
				main_container.set_item_x_position (label_6, 160)
				main_container.set_item_y_position (label_6, 90)
			end


		end

	File_open_dialog: EV_FILE_OPEN_DIALOG
			-- 	EV_DIRECTORY_DIALOG for test.
		once
			create Result
			Result.open_actions.extend(agent open_Path(Result))
		end

	File_save_dialog: EV_FILE_SAVE_DIALOG
			-- 	EV_FILE_SAVE_DIALOG for test.
		once
			create Result
			Result.save_actions.extend (agent save_Path(Result))
		end

	first_window: EV_TITLED_WINDOW
			-- The window for the sample.
		once
			create Result
			Result.set_title ("Main window")
			Result.set_size (300, 300)
		end

	open_Path(file: EV_FILE_OPEN_DIALOG)
		local
			error:EV_INFORMATION_DIALOG

		do
			text_2.remove_text
			if(file.full_file_path.out.substring (file.full_file_path.out.count-3, file.full_file_path.out.count).is_equal (".srt"))then
				combo_box.set_text ("23.97")
				controller.system_logic.make_with_subrip_subtitle (file.full_file_path.out)
				text.set_text (controller.system_logic.source_as_subrip.out)
				notebook.select_item (text)
				select_radio_button
				text_field.set_text (file.full_file_path.out.substring (1, file.file_name.count-4))
				text_field_2.set_text (file.full_file_path.out.substring (1, file.file_name.count-4)+"Converted")

				file_name := file.file_title.out
				enable_disable_button()

			else
				if(file.full_file_path.out.substring (file.full_file_path.out.count-3, file.full_file_path.out.count).is_equal (".sub"))then
					spin_button.set_value (0)
					controller.system_logic.make_with_microdvd_subtitle (file.full_file_path.out)
					text.set_text (controller.system_logic.source_as_microdvd.out)
					notebook.select_item (text)
					select_radio_button
					text_field.set_text (file.full_file_path.out.substring (1, file.file_name.count-4))
					text_field_2.set_text (file.full_file_path.out.substring (1, file.file_name.count-4)+"Converted")

					enable_disable_button()

				else
					create error.make_with_text ("The file is not correct")
					error.show
					enable_disable_button()
				end
			end

		end
	enable_disable_button
	do
		if(controller.system_logic.is_ready_to_convert)then
			button_3.set_background_color(color2)
			button_3.enable_sensitive
		else
			button_3.set_background_color(color)
			button_3.disable_sensitive
		end
	end

	save_Path(file: EV_FILE_SAVE_DIALOG)
		do
			text_field_2.set_text (file.file_name)
		end


	select_radio_button
	do
		if(controller.system_logic.has_loaded_microdvd_subtitle)then
			radio_button_microdvd.enable_sensitive
			radio_button_microdvd.enable_select
			radio_button_subrip.disable_sensitive
		else
			radio_button_subrip.enable_sensitive
			radio_button_subrip.enable_select
			radio_button_microdvd.disable_sensitive
		end
	end

feature --Implementation, ready

	ready
		local
			msj_error: EV_INFORMATION_DIALOG
			fps_real:REAL
			millisecods:INTEGER


		do
			if(controller.system_logic.is_ready_to_convert)then
				button_3.disable_sensitive

				controller.system_logic.convert_subtitle

				if (controller.system_logic.has_loaded_microdvd_subtitle)then
					if(spin_button.value>0)then
						millisecods:=spin_button.value
						controller.system_logic.target_as_subrip.adjust_time (millisecods,"forward")
					else
						if(spin_button.value<0)then
							millisecods:=spin_button.value
							controller.system_logic.target_as_subrip.adjust_time (millisecods.abs,"rewind")
						end
					end
					text_2.set_text (controller.system_logic.target_as_subrip.out)

				else
					fps_real:=combo_box.text.to_real
					controller.system_logic.target_as_microdvd.change_fps (fps_real)
					text_2.set_text (controller.system_logic.target_as_microdvd.out)
				end

				controller.system_logic.save (text_field_2.text)
				notebook.select_item (text_2)
				create msj_error.make_with_text ("I successfully converted subtitle")
				msj_error.set_title ("Correct")
				msj_error.set_pixmap (default_pixmaps.information_pixel_buffer)
				msj_error.show_modal_to_window (Current)
				enable_disable_button ()

			else
				create msj_error.make_with_text ("System is not ready to convert")
				enable_disable_button ()
			end
		end

feature -- Observer features

	on_update
		local
			text_subtitle:STRING
		do
			if controller.system_logic.has_loaded_microdvd_subtitle then
				text.remove_text
				create text_subtitle.make_from_string (controller.system_logic.source_as_microdvd.out)
				text.set_text (text_subtitle)
				if attached {SUBRIP_SUBTITLE} controller.system_logic.target as subrip_sub then
					text_2.remove_text
					create text_subtitle.make_from_string (subrip_sub.out)
					text_2.set_text (text_subtitle)
				end
			end
			if controller.system_logic.has_loaded_subrip_subtitle then
				text.remove_text
				create text_subtitle.make_from_string (controller.system_logic.source_as_subrip.out)
				text.set_text (text_subtitle)
				if attached {MICRODVD_SUBTITLE} controller.system_logic.target as microdvd_sub then
					text_2.remove_text
					create text_subtitle.make_from_string (microdvd_sub.out)
					text_2.set_text (text_subtitle)
				end
			end
		end

feature {NONE} -- Implementation / Constants

	Window_title: STRING = "Eiffel Subtitle Converter"
			-- Title of the window.

	Window_width: INTEGER = 595
			-- Initial width for this window.

	Window_height: INTEGER = 550
			-- Initial height for this window.

	controller: CONTROLLER

end
