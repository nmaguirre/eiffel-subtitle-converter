note
	description: "Main window for this application"
	author: "Generated by the New Vision2 Application Wizard."
	date: "$Date: 2015/10/5 21:3:11 $"
	revision: "1.0.0"

class
	MAIN_WINDOW

inherit
	EV_TITLED_WINDOW
		redefine
			create_interface_objects,
			initialize,
			is_in_default_state
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end


	ABSTRACT_OBSERVER
		undefine
			default_create, copy
		redefine
			on_update
		end

create
	default_create

feature -- Initialization

	set_logic(new_logic: CONVERTER_LOGIC)
		do
			system_logic := new_logic
		end

feature {NONE} -- Initialization

	create_interface_objects
			-- <Precursor>
		do
				-- Create main container.
			create main_container

			create button.make_with_text("...")
			create button_2.make_with_text("...")
			create button_3.make_with_text("Ready")

			create text.default_create
			create text_2.default_create

			create label.make_with_text ("Input File :")
			create label_2.make_with_text ("Format :")
			create label_4.make_with_text ("Output File :")
			create label_5.make_with_text ("Convert : MicroDVD to SubRIP")

			create text_field.default_create
			create text_field_2.default_create

			create radio_button_subrip.make_with_text ("SubRIP Format")
			create radio_button_microdvd.make_with_text ("MicroDVD Format")

			create color.make_with_rgb (0,0,0)
			create color2.make_with_rgb (0,0.710,0)

			create file_name.make_empty

			create notebook
		end

	initialize
			-- Build the interface for this window.
		do
			Precursor {EV_TITLED_WINDOW}

			build_main_container
			extend (main_container)

				-- Execute `request_close_window' when the user clicks
				-- on the cross in the title bar.
			close_request_actions.extend (agent request_close_window)

				-- Set the title of the window.
			set_title (Window_title)

			disable_user_resize

				-- Set the initial size of the window.
			set_size (Window_width, Window_height)

			main_container.extend (label)
			main_container.set_item_x_position (label, 10)
			main_container.set_item_y_position (label, 23)

			text_field.set_minimum_height (24)
			text_field.set_minimum_width (453)
			main_container.extend (text_field)
			main_container.set_item_x_position (text_field, 80)
			main_container.set_item_y_position (text_field, 20)

			button.select_actions.extend (agent File_open_dialog.show_modal_to_window (first_window))
			button.set_minimum_height (22)
			button.set_minimum_width (35)
			main_container.extend (button)
			main_container.set_item_x_position (button, 533)
			main_container.set_item_y_position (button, 20)

			main_container.extend (label_2)
			main_container.set_item_x_position (label_2, 50)
			main_container.set_item_y_position (label_2, 60)

			radio_button_microdvd.select_actions.extend (agent event)
			radio_button_microdvd.disable_sensitive
			main_container.extend (radio_button_microdvd)
			main_container.set_item_x_position (radio_button_microdvd, 100)
			main_container.set_item_y_position (radio_button_microdvd, 58)

			radio_button_subrip.select_actions.extend (agent event_2)
			radio_button_subrip.disable_sensitive
			main_container.extend (radio_button_subrip)
			main_container.set_item_x_position (radio_button_subrip, 225)
			main_container.set_item_y_position (radio_button_subrip, 58)

			text.disable_edit
			text_2.disable_edit

			notebook.set_minimum_size (557, 300)
			main_container.extend (notebook)
			main_container.set_item_x_position (notebook, 10)
			main_container.set_item_y_position (notebook, 90)
			notebook.extend (text)
			notebook.set_item_text (text, "Input")

			notebook.extend (text_2)
			notebook.set_item_text (text_2, "Output")



			main_container.extend (label_4)
			main_container.set_item_x_position (label_4, 10)
			main_container.set_item_y_position (label_4, 403)

			text_field_2.set_minimum_height (24)
			text_field_2.set_minimum_width (453)
			main_container.extend (text_field_2)
			main_container.set_item_x_position (text_field_2, 80)
			main_container.set_item_y_position (text_field_2, 400)

			button_2.select_actions.extend (agent File_save_dialog.show_modal_to_window (first_window))
			button_2.set_minimum_height (22)
			button_2.set_minimum_width (35)
			main_container.extend (button_2)
			main_container.set_item_x_position (button_2, 533)
			main_container.set_item_y_position (button_2, 400)

			main_container.extend (label_5)
			main_container.set_item_x_position (label_5, 300)
			main_container.set_item_y_position (label_5, 455)

			button_3.select_actions.extend (agent converter_accion)
			button_3.set_foreground_color(color)
			button_3.set_minimum_height (22)
			button_3.set_minimum_width (80)
			main_container.extend (button_3)
			main_container.set_item_x_position (button_3, 488)
			main_container.set_item_y_position (button_3, 450)
			button_3.select_actions.extend (agent ready)


		end



	is_in_default_state: BOOLEAN
			-- Is the window in its default state?
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then
				(height = Window_height) and then
				(title.is_equal (Window_title))
		end


feature {NONE} -- Implementation, Close event

	request_close_window
			-- Process user request to close the window.
		local
			question_dialog: EV_CONFIRMATION_DIALOG
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)

			if question_dialog.selected_button ~ (create {EV_DIALOG_CONSTANTS}).ev_ok then
					-- Destroy the window.
				destroy

					-- End the application.
					--| TODO: Remove next instruction if you don't want the application
					--|       to end when the first window is closed..
				if attached (create {EV_ENVIRONMENT}).application as a then
					a.destroy
				end
			end
		end

feature {NONE} -- Implementation

	file_name: STRING

	color, color2:EV_COLOR

	radio_button_subRIP: EV_RADIO_BUTTON
	radio_button_microDVD: EV_RADIO_BUTTON

	text_field,text_field_2: EV_TEXT_FIELD

	label,label_2,label_4,label_5: EV_LABEL

	button,button_2,button_3:EV_BUTTON

	notebook: EV_NOTEBOOK

	text,text_2: EV_TEXT

	main_container: EV_FIXED
			-- Main container (contains all widgets displayed in this window).

	build_main_container
			-- Populate `main_container'.
		do
			main_container.extend (create {EV_FIXED})
		ensure
			main_container_created: main_container /= Void
		end

	event
		do
			label_5.set_text ("Convert : MicroDVD to SubRIP")
		end

	event_2
		do
			label_5.set_text ("Convert : SubRIP to MicroDVD")
		end

	File_open_dialog: EV_FILE_OPEN_DIALOG
			-- 	EV_DIRECTORY_DIALOG for test.
		once
			create Result
			Result.open_actions.extend(agent open_Path(Result))
		end

	File_save_dialog: EV_FILE_SAVE_DIALOG
			-- 	EV_FILE_SAVE_DIALOG for test.
		once
			create Result
			Result.set_start_directory (text_field.text)
			Result.set_file_name (file_name)
			Result.save_actions.extend (agent save_Path(Result))
		end

	first_window: EV_TITLED_WINDOW
			-- The window for the sample.
		once
			create Result
			Result.set_title ("Main window")
			Result.set_size (300, 300)
		end

	open_Path(file: EV_FILE_OPEN_DIALOG)
		local
			error:EV_INFORMATION_DIALOG

		do
			if(file.full_file_path.out.substring (file.full_file_path.out.count-3, file.full_file_path.out.count).is_equal (".srt"))then
					file_name := file.file_title
					radio_button_subrip.enable_select
					text_field.set_text (file.full_file_path.out)
					text_field_2.set_text (file.full_file_path.out.substring (1, file.file_name.count-4)+"Converter.srt")
					read_file_to_string (file.full_file_path)
					button_3.set_background_color(color2)
			else
				if(file.full_file_path.out.substring (file.full_file_path.out.count-3, file.full_file_path.out.count).is_equal (".sub"))then
					file_name := file.file_title
					radio_button_microdvd.enable_select
					text_field.set_text (file.full_file_path.out)
					text_field_2.set_text (file.full_file_path.out.substring (1, file.file_name.count-4)+"Converter.srt")
					read_file_to_string (file.full_file_path)
					button_3.set_background_color(color2)
				else
					create error.make_with_text ("The file is not correct")
					error.show
				end
			end

		end

	read_file_to_string (a_path: PATH)
            -- Show how to read a file into a string
            -- For binary files you can use {RAW_FILE}.
        local
            l_file: FILE
            l_content: STRING
        do
            create {PLAIN_TEXT_FILE} l_file.make_with_path (a_path)
            if l_file.exists and then l_file.is_readable then
                l_file.open_read
                l_file.read_stream (l_file.count)
                l_content := l_file.last_string
                text.set_text (l_content)
                l_file.close
            else
                io.error.put_string ("Could not read, the file:[" + a_path.name + " ] does not exist")
                io.put_new_line
            end
        end

	save_Path(file: EV_FILE_SAVE_DIALOG)
		do
			text_field_2.set_text (file.file_name)
		end

	converter_accion
	do
	end

feature --Implementation, ready

	ready
		local
			msj_error: EV_INFORMATION_DIALOG
		do
			if text.text_length = 0 and text_2.text_length = 0 then
				create msj_error.make_with_text ("There is no subtitle to convert ")
				msj_error.set_title ("Error")
				msj_error.set_pixmap (default_pixmaps.error_pixmap)
				msj_error.show_modal_to_window (Current)
			else
				create msj_error.make_with_text ("I successfully converted subtitle")
				msj_error.set_title ("Correct")
				msj_error.set_pixmap (default_pixmaps.information_pixel_buffer)
				msj_error.show_modal_to_window (Current)
			end
		end

feature -- Observer features

	on_update
		do
			if system_logic.has_loaded_microdvd_subtitle then
				text.remove_text
				text.append_text (system_logic.source_as_microdvd.out)
				if attached {SUBRIP_SUBTITLE} system_logic.target as subrip_sub then
					text.remove_text
					text.append_text (subrip_sub.out)
				end
			end
		end

feature {NONE} -- Implementation / Constants

	Window_title: STRING = "app"
			-- Title of the window.

	Window_width: INTEGER = 595
			-- Initial width for this window.

	Window_height: INTEGER = 550
			-- Initial height for this window.

	system_logic: CONVERTER_LOGIC

end
